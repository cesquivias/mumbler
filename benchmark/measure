#!/usr/bin/env python

import os
import subprocess
import sys
import time

from argparse import ArgumentParser
from os.path import dirname, join, normpath, realpath


GRAAL_HOME = os.environ.get('GRAAL_HOME') if 'GRAAL_HOME' in os.environ else \
             os.environ.get('JAVA_HOME')
if not GRAAL_HOME:
    raise Exception('JAVA_HOME environment variable not set')

MUMBLER_HOME = os.environ.get('MUMBLER_HOME')
if not MUMBLER_HOME:
    raise Exception('MUMBLER_HOME environment variable not set')


def run(name, lang_args, suffix, params):
    print suffix
    print '--------------'
    print name
    start = int(time.time() * 1000)
    filename = name + '.' + suffix
    subprocess.call(lang_args + ([filename] + params))
    end = int(time.time() * 1000)
    print 'total time: %s\n' % (end - start)

def run_truffle_mumbler(name):
    run(name, [os.path.join(MUMBLER_HOME, 'bin/mumbler')], 'mumbler', ['--tco=false'])

def run_racket(name):
    run(name, ['racket'], 'rkt', [])

def run_node(name):
    run(name, ['nodejs'], 'js', [])

def run_python(name):
    run(name, ['python'], 'py', [])

def run_simple_language(name):
    run(name, ['sl'], 'sl', [])

parser = ArgumentParser(description='Take benchmark measurements')
parser.add_argument('benchmark', type=str,
                    help='directory name with benchmark')

args = parser.parse_args()

#run_racket(args.benchmark)
#run_node(args.benchmark)
#run_simple_language(args.benchmark)
run_python(args.benchmark)
run_truffle_mumbler(args.benchmark)
